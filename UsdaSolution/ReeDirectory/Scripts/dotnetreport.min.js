/// .Net Report Builder knockout view model
/// License has to be purchased for use
/// 2015 (c) www.dotnetreport.com
var reportViewModel = function (e) { var o = this; e = e || {}, o.ReportId = ko.observable(0), o.ReportName = ko.observable(), o.ReportDescription = ko.observable(), o.FolderID = ko.observable(), o.ReportID = ko.observable(), o.Tables = ko.observableArray([]), o.SelectedTable = ko.observable(), o.ChooseFields = ko.observableArray([]), o.ChosenFields = ko.observableArray([]), o.SelectedFields = ko.observableArray([]), o.SelectFields = ko.observableArray([]), o.SelectedField = ko.observable(), o.IncludeSubTotal = ko.observable(!1), o.AggregateReport = ko.observable(!1), o.SortByField = ko.observable(), o.Filters = ko.observableArray([]), o.SaveReport = ko.observable(!0), o.ReportMode = ko.observable("start"), o.Folders = ko.observableArray(), o.SavedReports = ko.observableArray([]), o.SelectedFolder = ko.observable(), o.createNewReport = function () { o.clearReport(), wizardHelper && "function" == typeof wizardHelper.openFirstStep && wizardHelper.openFirstStep(), wizardHelper && "function" == typeof wizardHelper.disableAll && wizardHelper.disableAll(), o.ReportMode("generate") }, o.cancelCreateReport = function () { confirm("Are you sure you would like to cancel editing this Report?") && o.clearReport(), o.ReportMode("start") }, o.ManageFolder = { FolderName: ko.observable(), IsNew: ko.observable(!1), newFolder: function () { o.ManageFolder.IsNew(!0), o.ManageFolder.FolderName(""), $("#folderModal").modal("show") }, editFolder: function () { return null == o.SelectedFolder() ? void alertify.error("Please choose a folder first") : 0 == o.SelectedFolder().Id ? void alertify.error("Cannot edit Default folder") : (o.ManageFolder.IsNew(!1), o.ManageFolder.FolderName(o.SelectedFolder().FolderName), void $("#folderModal").modal("show")) }, saveFolder: function () { if ("" == o.ManageFolder.FolderName()) return void alertify.error("Please enter a Folder Name"); var t = o.ManageFolder.IsNew() ? 0 : o.SelectedFolder().Id; return 0 != $.grep(o.Folders(), function (e) { return e.FolderName.toLowerCase() == o.ManageFolder.FolderName().toLowerCase() && (0 == t || 0 != t && e.Id != t) }).length ? (alertify.error("Folder name is already in use, please choose a different Folder Name"), !1) : void ajaxcall({ url: e.apiUrl + "/ReportApi/SaveFolder", data: { account: e.accountApiToken, dataConnect: e.dataconnectApiToken, clientId: e.clientId, folderId: t, folderName: o.ManageFolder.FolderName() } }).success(function (e) { if (o.ManageFolder.IsNew()) o.Folders.push({ Id: e, FolderName: o.ManageFolder.FolderName() }); else { var t = o.SelectedFolder(); o.Folders.remove(o.SelectedFolder()), t.FolderName = o.ManageFolder.FolderName(), o.Folders.push(t) } $("#folderModal").modal("hide") }) }, deleteFolder: function () { return null == o.SelectedFolder() ? void alertify.error("Please choose a folder first") : 0 == o.SelectedFolder().Id ? void alertify.error("Cannot delete Default folder") : void (confirm("Are you sure you want to delete this Folder?\n\nWARNING: Deleting a folder will delete all reports and this action cannot be undone.") && ajaxcall({ url: e.apiUrl + "/ReportApi/DeleteFolder", data: { account: e.accountApiToken, dataConnect: e.dataconnectApiToken, clientId: e.clientId, folderId: o.SelectedFolder().Id } }).success(function () { o.Folders.remove(o.SelectedFolder()) })) } }, o.reportsInFolder = ko.computed(function () { return null == o.SelectedFolder() ? [] : $.grep(o.SavedReports(), function (e) { return e.folderId == o.SelectedFolder().Id }) }), o.clearReport = function () { o.ReportName(""), o.ReportDescription(""), o.FolderID(0), o.ChosenFields([]), o.SelectedFields([]), o.SelectFields([]), o.SelectedField(null), o.IncludeSubTotal(!1), o.AggregateReport(!1), o.SortByField(null), o.Filters([]), o.SaveReport(!0) }, o.SelectedTable.subscribe(function (t) { return null == t ? void o.ChooseFields([]) : void ajaxcall({ url: e.apiUrl + "/ReportApi/GetFields", data: { account: e.accountApiToken, dataConnect: e.dataconnectApiToken, clientId: e.clientId, tableId: t.tableId } }).success(function (e) { $.each(e, function (e, o) { o.selectedFieldName = t.tableName + " > " + o.fieldName, o.selectedAggregate = ko.observable() }), o.ChooseFields(e) }) }), o.MoveChosenFields = function () { $.each(o.ChosenFields(), function (e, t) { $.grep(o.SelectedFields(), function (e) { return e.fieldId == t.fieldId }).length > 0 ? alertify.error(t.fieldName + " is already Selected") : o.SelectedFields.push(t) }) }, o.MoveAllFields = function () { $.each(o.ChooseFields(), function (e, t) { 0 === $.grep(o.SelectedFields(), function (e) { return e.fieldId == t.fieldId }).length && o.SelectedFields.push(t) }) }, o.RemoveSelectedFields = function () { $.each(o.SelectFields(), function (e, t) { o.SelectedFields.remove(t) }) }, o.canMoveUp = function () { return 1 == o.SelectFields().length && o.SelectedFields.indexOf(o.SelectFields()[0]) >= 1 ? !0 : !1 }, o.canMoveDown = function () { return 1 == o.SelectFields().length && o.SelectedFields.indexOf(o.SelectFields()[0]) < o.SelectedFields().length - 1 ? !0 : !1 }, o.MoveUp = function () { if (o.canMoveUp()) { var e = o.SelectFields()[0], t = o.SelectedFields.indexOf(e); if (t >= 1) { var l = o.SelectedFields(); o.SelectedFields.splice(t - 1, 2, l[t], l[t - 1]) } } }, o.MoveDown = function () { if (o.canMoveDown()) { var e = o.SelectFields()[0], t = o.SelectedFields.indexOf(e), l = o.SelectedFields(); t < l.length - 1 && o.SelectedFields.splice(t, 2, l[t + 1], l[t]) } }, o.AddFilter = function () { var t = ko.observableArray([]), l = ko.observable(); l.subscribe(function (o) { o.hasForeignKey && ajaxcall({ url: e.apiUrl + "/ReportApi/GetLookupList", data: { account: e.accountApiToken, dataConnect: e.dataconnectApiToken, clientId: e.clientId, fieldId: o.fieldId } }).success(function (e) { ajaxcall({ url: "/Report/GetLookupList", data: { lookupSql: e.sql, connectKey: e.connectKey } }).success(function (e) { t(e) }) }) }), o.Filters.push({ AndOr: ko.observable(), Field: l, Operator: ko.observable(), Value: ko.observable(), Value2: ko.observable(), LookupList: t }) }, o.AndOrOptions = ["And", "Or"], o.RemoveFilter = function (e) { confirm("Are you sure you would like to remove this filter?") && o.Filters.remove(e) }, o.FindField = function (e) { return $.grep(o.SelectedFields(), function (o) { return o.fieldId == e })[0] }, o.SaveWithoutRun = function () { o.RunReport(!0) }, o.RunReport = function (t) { t = t === !0 ? !0 : !1, ajaxcall({ url: e.apiUrl + "/ReportApi/RunReport", data: { account: e.accountApiToken, dataConnect: e.dataconnectApiToken, clientId: e.clientId, saveReport: o.SaveReport(), reportJson: JSON.stringify({ ReportID: o.ReportID(), ReportName: o.ReportName(), ReportDescription: o.ReportDescription(), FolderID: o.FolderID(), SelectedFieldIDs: $.map(o.SelectedFields(), function (e) { return e.fieldId }), Filters: $.map(o.Filters(), function (e) { return { SavedReportId: o.ReportID(), FieldId: e.Field().fieldId, AndOr: e.AndOr(), Operator: e.Operator(), Value1: e.Value(), Value2: e.Value2() } }), IncludeSubTotals: o.IncludeSubTotal(), IsAggregateReport: o.AggregateReport(), SortBy: o.SortByField(), GroupFunctionList: $.map(o.SelectedFields(), function (e) { return { FieldID: e.fieldId, GroupFunc: e.selectedAggregate() } }) }) } }).success(function (e) { o.SaveReport() && (alertify.success("Report Saved"), o.LoadAllSavedReports()), t || redirectToReport({ reportName: o.ReportName(), reportDescription: o.ReportDescription(), includeSubTotal: o.IncludeSubTotal(), aggregateReport: o.AggregateReport(), reportSql: e.sql, connectKey: e.connectKey }) }) }, ajaxcall({ url: e.apiUrl + "/ReportApi/GetFolders", data: { account: e.accountApiToken, dataConnect: e.dataconnectApiToken, clientId: e.clientId } }).success(function (e) { o.Folders(e) }), o.LoadAllSavedReports = function () { ajaxcall({ url: e.apiUrl + "/ReportApi/GetSavedReports", data: { account: e.accountApiToken, dataConnect: e.dataconnectApiToken, clientId: e.clientId } }).success(function (t) { $.each(t, function (t, l) { l.runMode = !1, l.openReport = function () { ajaxcall({ url: e.apiUrl + "/ReportApi/LoadReport", data: { account: e.accountApiToken, dataConnect: e.dataconnectApiToken, clientId: e.clientId, reportId: l.reportId } }).success(function (e) { o.ReportID(e.ReportID), o.ReportName(e.ReportName), o.ReportDescription(e.ReportDescription), o.FolderID(e.FolderID), $.each(e.SelectedFields, function (e, o) { o.selectedFieldName = o.tableName + " > " + o.fieldName, o.selectedAggregate = ko.observable(o.aggregateFunction) }), o.SelectedFields(e.SelectedFields), o.ChosenFields([]), o.SelectFields([]), o.SelectedField(null), o.IncludeSubTotal(e.IncludeSubTotals), o.AggregateReport(e.IsAggregateReport), o.SortByField(e.SortBy), o.Filters([]), $.each(e.Filters, function (e, t) { o.Filters.push({ AndOr: ko.observable(t.AndOr), Field: ko.observable(o.FindField(t.FieldId)), Operator: ko.observable(t.Operator), Value: ko.observable(t.Value1), Value2: ko.observable(t.Value2) }) }), o.SaveReport(!0), wizardHelper && "function" == typeof wizardHelper.openFirstStep && wizardHelper.openFirstStep(), wizardHelper && "function" == typeof wizardHelper.enableAllSteps && wizardHelper.enableAllSteps(), l.runMode ? (o.SaveReport(!1), o.RunReport(), l.runMode = !1) : o.ReportMode("generate") }) }, l.runReport = function () { l.runMode = !0, l.openReport() }, l.deleteReport = function () { confirm("Are you sure you would like to Delete this Report?") && ajaxcall({ url: e.apiUrl + "/ReportApi/DeleteReport", data: { account: e.accountApiToken, dataConnect: e.dataconnectApiToken, clientId: e.clientId, reportId: l.reportId } }).success(function () { o.SavedReports.remove(l) }) } }), o.SavedReports(t) }) }, o.LoadAllSavedReports(), ajaxcall({ url: e.apiUrl + "/ReportApi/GetTables", data: { account: e.accountApiToken, dataConnect: e.dataconnectApiToken, clientId: e.clientId } }).success(function (e) { o.Tables(e) }) };